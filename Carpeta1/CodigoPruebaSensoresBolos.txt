/*
 * GccApplication2.c
 *
 * Created: 25/04/2025 10:42:23
 * Author : nicol
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint8_t bolos_caidos = 0;
volatile uint8_t estado_prev_K = 0xFF;  // Se asume que los sensores están normalmente en HIGH

void setup_PCINT() {
	// Configurar PK0-5 como entradas
	DDRK &= ~((1 << PK0) | (1 << PK1) | (1 << PK2) |
	(1 << PK3) | (1 << PK4) | (1 << PK5));

	// Activar resistencias pull-up internas (opcional, si sensores son activos en LOW)
	PORTK |= (1 << PK0) | (1 << PK1) | (1 << PK2) |
	(1 << PK3) | (1 << PK4) | (1 << PK5);

	// Activar interrupciones por cambio de pin en PCINT16 a PCINT21
	PCMSK2 |= (1 << PCINT16) | (1 << PCINT17) | (1 << PCINT18) |
	(1 << PCINT19) | (1 << PCINT20) | (1 << PCINT21);

	// Habilitar el grupo de interrupciones PCINT2 (PCINT[23:16])
	PCICR |= (1 << PCIE2);

	sei();  // Activar interrupciones globales
}

void setup_LED_testigo() {
	DDRL |= (1 << PL0);   // Configurar PL0 como salida
	PORTL &= ~(1 << PL0); // LED inicialmente apagado
}

ISR(PCINT2_vect) {
	uint8_t lectura_actual = PINK & 0b00111111;  // Leer PK0-PK5
	uint8_t cambios = estado_prev_K ^ lectura_actual;

	for (uint8_t i = 0; i < 6; i++) {
		if ((cambios & (1 << i)) && !(lectura_actual & (1 << i))) {
			bolos_caidos++;
			PORTL |= (1 << PL0);  // Encender LED (queda encendido)
		}
	}

	estado_prev_K = lectura_actual;
}

int main(void) {
	setup_PCINT();
	setup_LED_testigo();

	while (1) {
		// Aquí puedes hacer algo con la variable bolos_caidos
		// como actualizar un display, enviar por UART, etc.
	}
}


